var Planit;

Planit = (function() {
  function Planit() {}

  Planit.prototype["new"] = function(_at_options) {
    this.options = _at_options;
    if (!this.options) {
      this.options = {};
    }
    this.setOptions();
    this.initPlan();
    return this.initMarkers();
  };

  Planit.prototype.setOptions = function() {
    this.setDefaultOptions();
    if (this.options.container) {
      return this.container = $("#" + this.options.container);
    }
  };

  Planit.prototype.setDefaultOptions = function() {
    return this.container = $('#planit');
  };

  Planit.prototype.initPlan = function() {
    return this.plan = new Planit.Plan({
      container: this.container
    });
  };

  Planit.prototype.initMarkers = function() {
    var marker, _i, _len, _ref, _results;
    this.markers = new Planit.Marker({
      plan: this.container
    });
    _ref = this.options.markers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      _results.push(this.markers.add(marker.coords));
    }
    return _results;
  };

  return Planit;

})();

window.planit = new Planit;

Planit.Plan = (function() {
  function Plan(_at_options) {
    this.options = _at_options;
    this.initContainers();
  }

  Plan.prototype.initContainers = function() {
    this.options.container.addClass('planit-container');
    return this.options.container.append("<div class=\"planit-markers-container\"></div>");
  };

  return Plan;

})();

Planit.Marker = (function() {
  function Marker(_at_options) {
    this.options = _at_options;
    this.setOptions();
  }

  Marker.prototype.setOptions = function() {
    this.plan = this.options.plan;
    return this.markersContainer = this.plan.find('.planit-markers-container');
  };

  Marker.prototype.add = function(coords) {
    this.markersContainer.append($('<div></div>').addClass('planit-marker draggable').css({
      left: coords[0] + "%",
      top: coords[1] + "%"
    }));
    return new Draggabilly(this.markersContainer.find('.planit-marker').last()[0], {
      containment: '.planit-markers-container'
    });
  };

  return Marker;

})();

//# sourceMappingURL=data:application/json;base64,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T0EsR0FBQSxHQUFLLFNBQUMsTUFBRCxHQUFBO0FBQ0gsSUFBQSxJQUFDLENBQUEsZ0JBQWdCLENBQUMsTUFBbEIsQ0FBeUIsQ0FBQSxDQUFHLGFBQUgsQ0FDdkIsQ0FBQyxRQURzQixDQUNaLHlCQURZLENBRXZCLENBQUMsR0FGc0IsQ0FHckI7QUFBQSxNQUFBLElBQUEsRUFBUyxNQUFPLENBQUEsQ0FBQSxDQUFSLEdBQVcsR0FBbkI7QUFBQSxNQUNBLEdBQUEsRUFBUSxNQUFPLENBQUEsQ0FBQSxDQUFSLEdBQVcsR0FEbEI7S0FIcUIsQ0FBekIsQ0FBQSxDQUFBO1dBT0ksSUFBQSxXQUFBLENBQVksSUFBQyxDQUFBLGdCQUFnQixDQUFDLElBQWxCLENBQXdCLGdCQUF4QixDQUF3QyxDQUFDLElBQXpDLENBQUEsQ0FBZ0QsQ0FBQSxDQUFBLENBQTVELEVBQ0Y7QUFBQSxNQUFBLFdBQUEsRUFBYywyQkFBZDtLQURFLEVBUkQ7RUFBQSxDQVBMLENBQUE7O2dCQUFBOztJQXZDRixDQUFBIiwiZmlsZSI6InBsYW5pdC10bXAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQbGFuaXRcblxuICBuZXc6IChAb3B0aW9ucykgLT5cbiAgICBAb3B0aW9ucyA9IHt9IHVubGVzcyBAb3B0aW9uc1xuICAgIEBzZXRPcHRpb25zKClcbiAgICBAaW5pdFBsYW4oKVxuICAgIEBpbml0TWFya2VycygpXG5cbiAgc2V0T3B0aW9uczogLT5cbiAgICBAc2V0RGVmYXVsdE9wdGlvbnMoKVxuICAgIEBjb250YWluZXIgPSAkKFwiIyN7QG9wdGlvbnMuY29udGFpbmVyfVwiKSBpZiBAb3B0aW9ucy5jb250YWluZXJcblxuICBzZXREZWZhdWx0T3B0aW9uczogLT5cbiAgICBAY29udGFpbmVyID0gJCgnI3BsYW5pdCcpXG5cbiAgaW5pdFBsYW46IC0+XG4gICAgQHBsYW4gPSBuZXcgUGxhbml0LlBsYW5cbiAgICAgIGNvbnRhaW5lcjogQGNvbnRhaW5lclxuXG4gIGluaXRNYXJrZXJzOiAtPlxuICAgIEBtYXJrZXJzID0gbmV3IFBsYW5pdC5NYXJrZXJcbiAgICAgIHBsYW46IEBjb250YWluZXJcbiAgICBmb3IgbWFya2VyIGluIEBvcHRpb25zLm1hcmtlcnNcbiAgICAgIEBtYXJrZXJzLmFkZChtYXJrZXIuY29vcmRzKVxuXG53aW5kb3cucGxhbml0ID0gbmV3IFBsYW5pdFxuXG5jbGFzcyBQbGFuaXQuUGxhblxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMpIC0+XG4gICAgQGluaXRDb250YWluZXJzKClcblxuICBpbml0Q29udGFpbmVyczogLT5cbiAgICBAb3B0aW9ucy5jb250YWluZXIuYWRkQ2xhc3MoJ3BsYW5pdC1jb250YWluZXInKVxuICAgIEBvcHRpb25zLmNvbnRhaW5lci5hcHBlbmQoXCJcIlwiPGRpdiBjbGFzcz1cInBsYW5pdC1tYXJrZXJzLWNvbnRhaW5lclwiPjwvZGl2PlwiXCJcIilcblxuXG5jbGFzcyBQbGFuaXQuTWFya2VyXG5cbiAgY29uc3RydWN0b3I6IChAb3B0aW9ucykgLT5cbiAgICBAc2V0T3B0aW9ucygpXG5cbiAgc2V0T3B0aW9uczogLT5cbiAgICBAcGxhbiA9IEBvcHRpb25zLnBsYW5cbiAgICBAbWFya2Vyc0NvbnRhaW5lciA9IEBwbGFuLmZpbmQoJy5wbGFuaXQtbWFya2Vycy1jb250YWluZXInKVxuXG4gIGFkZDogKGNvb3JkcykgLT5cbiAgICBAbWFya2Vyc0NvbnRhaW5lci5hcHBlbmQoJCgnPGRpdj48L2Rpdj4nKVxuICAgICAgLmFkZENsYXNzKCdwbGFuaXQtbWFya2VyIGRyYWdnYWJsZScpXG4gICAgICAuY3NzKFxuICAgICAgICBsZWZ0OiBcIiN7Y29vcmRzWzBdfSVcIlxuICAgICAgICB0b3A6IFwiI3tjb29yZHNbMV19JVwiXG4gICAgICApXG4gICAgKVxuICAgIG5ldyBEcmFnZ2FiaWxseShAbWFya2Vyc0NvbnRhaW5lci5maW5kKCcucGxhbml0LW1hcmtlcicpLmxhc3QoKVswXSxcbiAgICAgIGNvbnRhaW5tZW50OiAnLnBsYW5pdC1tYXJrZXJzLWNvbnRhaW5lcidcbiAgICApXG4iXX0=