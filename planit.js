var Planit,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Planit = (function() {
  function Planit() {}

  Planit.prototype["new"] = function(_at_options) {
    this.options = _at_options;
    if (!this.options) {
      this.options = {};
    }
    this.setOptions();
    this.initPlan();
    return this.initMarkers();
  };

  Planit.prototype.setOptions = function() {
    this.setDefaultOptions();
    if (this.options.container) {
      return this.container = $("#" + this.options.container);
    }
  };

  Planit.prototype.setDefaultOptions = function() {
    return this.container = $('#planit');
  };

  Planit.prototype.initPlan = function() {
    return this.plan = new Planit.Plan({
      container: this.container
    });
  };

  Planit.prototype.initMarkers = function() {
    var marker, _i, _len, _ref, _results;
    this.markers = new Planit.Marker({
      plan: this.container
    });
    _ref = this.options.markers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      _results.push(this.markers.add(marker));
    }
    return _results;
  };

  return Planit;

})();

window.planit = new Planit;

Planit.Plan = (function() {
  function Plan(_at_options) {
    this.options = _at_options;
    this.initContainers();
  }

  Plan.prototype.initContainers = function() {
    this.options.container.addClass('planit-container');
    return this.options.container.append("<div class=\"planit-markers-container\"></div>");
  };

  return Plan;

})();

Planit.Marker = (function() {
  function Marker(_at_options) {
    this.options = _at_options;
    this.mousemove = __bind(this.mousemove, this);
    this.mouseup = __bind(this.mouseup, this);
    this.mousedown = __bind(this.mousedown, this);
    this.setOptions();
    this.bindDraggable();
  }

  Marker.prototype.setOptions = function() {
    this.plan = this.options.plan;
    return this.markersContainer = this.plan.find('.planit-markers-container');
  };

  Marker.prototype.add = function(options) {
    this.markersContainer.append($('<div></div>').addClass('planit-marker').css({
      left: options.coords[0] + "%",
      top: options.coords[1] + "%"
    }));
    if (options.draggable) {
      this.lastMarker().addClass('draggable');
      return this.lastMarker().on('mousedown', this.mousedown);
    }
  };

  Marker.prototype.mousedown = function(e) {
    return $(e.target).addClass('is-dragging');
  };

  Marker.prototype.mouseup = function(e) {
    return this.draggingMarker().removeClass('is-dragging');
  };

  Marker.prototype.mousemove = function(e) {
    var marker, markerBottom, markerHeight, markerLeft, markerRight, markerTop, markerWidth, markerX, markerY, markers, mouseLeft, mouseTop, planBottom, planRight;
    markers = this.markersContainer.find('.planit-marker.is-dragging');
    if (markers.length > 0) {
      marker = markers.first();
      mouseLeft = e.pageX - this.plan.offset().left;
      mouseTop = e.pageY - this.plan.offset().top;
      planRight = this.plan.width();
      planBottom = this.plan.height();
      markerLeft = mouseLeft - (marker.outerWidth() / 2);
      markerTop = mouseTop - (marker.outerHeight() / 2);
      markerRight = mouseLeft + (marker.outerWidth() / 2);
      markerBottom = mouseTop + (marker.outerHeight() / 2);
      markerWidth = marker.outerWidth();
      markerHeight = marker.outerHeight();
      if (markerLeft <= 0) {
        markerX = 0;
      } else if (markerRight < planRight) {
        markerX = markerLeft;
      } else {
        markerX = planRight - markerWidth;
      }
      if (markerTop <= 0) {
        markerY = 0;
      } else if (markerBottom < planBottom) {
        markerY = markerTop;
      } else {
        markerY = planBottom - markerHeight;
      }
      return marker.css({
        left: markerX,
        top: markerY
      });
    }
  };

  Marker.prototype.bindDraggable = function() {
    $(document).on('mousemove', this.mousemove);
    return $(document).on('mouseup', this.mouseup);
  };

  Marker.prototype.markers = function() {
    return this.markersContainer.find('.planit-marker');
  };

  Marker.prototype.draggingMarker = function() {
    return this.markersContainer.find('.planit-marker.is-dragging');
  };

  Marker.prototype.lastMarker = function() {
    return this.markers().last();
  };

  return Marker;

})();

//# sourceMappingURL=data:application/json;base64,