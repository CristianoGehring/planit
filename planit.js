var Planit,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Planit = (function() {
  function Planit() {
    this.getAllMarkers = __bind(this.getAllMarkers, this);
    this.addMarker = __bind(this.addMarker, this);
  }

  Planit.prototype["new"] = function(_at_options) {
    this.options = _at_options;
    if (!this.options) {
      this.options = {};
    }
    this.planOptions = {
      container: $('#planit')
    };
    if (this.options.container) {
      this.planOptions.container = $("#" + this.options.container);
    }
    if (this.options.backgroundImage) {
      this.planOptions.backgroundImage = this.options.backgroundImage;
    }
    this.plan = new Planit.Plan(this.planOptions);
    if (this.options.markers) {
      $(window).load((function(_this) {
        return function() {
          var marker, _i, _len, _ref, _results;
          _ref = _this.options.markers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            marker = _ref[_i];
            _results.push(_this.addMarker(marker));
          }
          return _results;
        };
      })(this));
    }
    return this;
  };

  Planit.prototype.addMarker = function(options) {
    options.plan = this.planOptions.container;
    return new Planit.Marker(options);
  };

  Planit.prototype.getAllMarkers = function() {
    return this.plan.getAllMarkers();
  };

  return Planit;

})();

window.planit = new Planit;

Planit.Plan = (function() {
  function Plan(_at_options) {
    this.options = _at_options;
    this.getAllMarkers = __bind(this.getAllMarkers, this);
    this.initContainers();
    if (this.options.backgroundImage) {
      this.addBackgroundImage();
    }
  }

  Plan.prototype.initContainers = function() {
    this.container = this.options.container;
    this.container.addClass('planit-container');
    this.container.append("<div class=\"planit-markers-container\"></div>");
    return this.markersContainer = this.container.find('.planit-markers-container').first();
  };

  Plan.prototype.addBackgroundImage = function() {
    this.container.append("<img src=\"" + this.options.backgroundImage + "\">");
    this.markersContainer.css({
      backgroundImage: "url('" + this.options.backgroundImage + "')"
    });
    return $(window).load((function(_this) {
      return function() {
        _this.container.css({
          height: _this.container.find('img').first().height()
        });
        return _this.container.find('img').first().remove();
      };
    })(this));
  };

  Plan.prototype.getAllMarkers = function() {
    var info, m, marker, markers, _i, _len, _ref;
    markers = [];
    _ref = this.markersContainer.find('.planit-marker');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      m = $(marker);
      marker = {
        coords: [m.position().left, m.position().top]
      };
      info = m.find('.planit-infobox');
      if (info.length > 0) {
        marker.infobox = info.html();
      }
      markers.push(marker);
    }
    return markers;
  };

  return Plan;

})();

Planit.Marker = (function() {
  function Marker(_at_options) {
    var id, infobox;
    this.options = _at_options;
    this.mousemove = __bind(this.mousemove, this);
    this.mouseup = __bind(this.mouseup, this);
    this.mousedown = __bind(this.mousedown, this);
    this.plan = this.options.plan;
    this.markersContainer = this.plan.find('.planit-markers-container');
    $(document).on('mousemove', this.mousemove);
    $(document).on('mouseup', this.mouseup);
    this.markersContainer.append($('<div><div class="planit-marker-content"></div></div>').addClass('planit-marker').css({
      left: this.options.coords[0] + "%",
      top: this.options.coords[1] + "%"
    }));
    if (this.options.draggable) {
      this.lastMarker().addClass('draggable');
      this.lastMarker().on('mousedown', this.mousedown);
    }
    if (this.options.infobox) {
      id = this.randomString(16);
      this.lastMarker().find('.planit-marker-content').append("<div class=\"planit-infobox\" id=\"info-" + id + "\">" + this.options.infobox + "</div>");
      this.lastMarker().attr('data-infobox', "info-" + id);
      infobox = $("#" + (this.lastMarker().attr('data-infobox')));
      infobox.css({
        left: -(infobox.width() / 2),
        bottom: infobox.outerHeight() + 5
      });
      this.lastMarker().on('mouseleave', (function(_this) {
        return function(e) {
          var marker;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          return infobox.removeClass('active');
        };
      })(this));
      this.lastMarker().on('mouseover', (function(_this) {
        return function(e) {
          var marker;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          if (marker.hasClass('is-dragging') || _this.draggingMarker().length > 0) {
            return infobox.removeClass('active');
          } else {
            return infobox.addClass('active');
          }
        };
      })(this));
    }
  }

  Marker.prototype.mousedown = function(e) {
    var infoboxID, marker;
    marker = $(e.target).closest('.planit-marker');
    marker.addClass('is-dragging');
    infoboxID = $(e.target).closest('.planit-marker').attr('data-infobox');
    return $("#" + infoboxID).removeClass('active');
  };

  Marker.prototype.mouseup = function(e) {
    var marker;
    if ($(e.target).hasClass('planit-marker-content')) {
      marker = $(e.target).closest('.planit-marker');
      $("#" + (marker.attr('data-infobox'))).addClass('active');
    }
    return this.draggingMarker().removeClass('is-dragging');
  };

  Marker.prototype.mousemove = function(e) {
    var marker, markerBottom, markerHeight, markerLeft, markerRight, markerTop, markerWidth, markerX, markerY, markers, mouseLeft, mouseTop, planBottom, planRight;
    markers = this.markersContainer.find('.planit-marker.is-dragging');
    if (markers.length > 0) {
      marker = markers.first();
      mouseLeft = e.pageX - this.plan.offset().left;
      mouseTop = e.pageY - this.plan.offset().top;
      planRight = this.plan.width();
      planBottom = this.plan.height();
      markerLeft = mouseLeft - (marker.outerWidth() / 2);
      markerTop = mouseTop - (marker.outerHeight() / 2);
      markerRight = mouseLeft + (marker.outerWidth() / 2);
      markerBottom = mouseTop + (marker.outerHeight() / 2);
      markerWidth = marker.outerWidth();
      markerHeight = marker.outerHeight();
      if (markerLeft <= 0) {
        markerX = 0;
      } else if (markerRight < planRight) {
        markerX = markerLeft;
      } else {
        markerX = planRight - markerWidth;
      }
      if (markerTop <= 0) {
        markerY = 0;
      } else if (markerBottom < planBottom) {
        markerY = markerTop;
      } else {
        markerY = planBottom - markerHeight;
      }
      return marker.css({
        left: markerX,
        top: markerY
      });
    }
  };

  Marker.prototype.markers = function() {
    return this.markersContainer.find('.planit-marker');
  };

  Marker.prototype.draggingMarker = function() {
    return this.markersContainer.find('.planit-marker.is-dragging');
  };

  Marker.prototype.lastMarker = function() {
    return this.markers().last();
  };

  Marker.prototype.randomString = function(length) {
    var str;
    if (length == null) {
      length = 16;
    }
    str = Math.random().toString(36).slice(2);
    str = str + Math.random().toString(36).slice(2);
    return str.substring(0, length - 1);
  };

  return Marker;

})();

//# sourceMappingURL=data:application/json;base64,