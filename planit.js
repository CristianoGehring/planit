var Planit,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Planit = (function() {
  function Planit() {
    this.dragEnd = __bind(this.dragEnd, this);
    this.addMarker = __bind(this.addMarker, this);
  }

  Planit.containerClass = 'planit-container';

  Planit.markerContainerClass = 'planit-markers-container';

  Planit.markerClass = 'planit-marker';

  Planit.markerContentClass = 'planit-marker-content';

  Planit.prototype["new"] = function(_at_options) {
    this.options = _at_options != null ? _at_options : {};
    if (this.options.container) {
      this.options.container = $('#planit');
    } else {
      this.options.container = $("#" + this.options.container);
    }
    this.options.container.addClass('planit-container');
    this.options.container.append("<div class=\"" + Planit.markerContainerClass + "\"></div>");
    this.container = this.options.container;
    this.markersContainer = this.container.find("." + Planit.markerContainerClass).first();
    if (this.options.backgroundImage) {
      this.container.append("<img src=\"" + this.options.backgroundImage + "\">");
      this.markersContainer.css({
        backgroundImage: "url('" + this.options.backgroundImage + "')"
      });
      $(window).load((function(_this) {
        return function() {
          _this.container.css({
            height: _this.container.find('img').first().height()
          });
          return _this.container.find('img').first().remove();
        };
      })(this));
    }
    if (this.options.markers) {
      $(window).load((function(_this) {
        return function() {
          var marker, _i, _len, _ref, _results;
          _ref = _this.options.markers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            marker = _ref[_i];
            _results.push(_this.addMarker(marker));
          }
          return _results;
        };
      })(this));
    }
    new Planit.Plan.Events({
      container: this.container,
      planit: this
    });
    return this;
  };

  Planit.prototype.addMarker = function(options) {
    options.container = this.container;
    return new Planit.Marker.Creator(options);
  };

  Planit.prototype.dragEnd = function(event, marker) {
    if (this.options.dragEnd) {
      return this.options.dragEnd(event, marker);
    }
  };

  Planit.randomString = function(length) {
    var str;
    if (length == null) {
      length = 16;
    }
    str = Math.random().toString(36).slice(2);
    str = str + Math.random().toString(36).slice(2);
    return str.substring(0, length - 1);
  };

  return Planit;

})();

window.planit = new Planit;

Planit.Plan = (function() {
  function Plan(_at_container) {
    this.container = _at_container;
    this.getAllMarkers = __bind(this.getAllMarkers, this);
    this.markersContainer = this.container.find("." + Planit.markerContainerClass).first();
  }

  Plan.prototype.getAllMarkers = function() {
    var info, m, marker, markers, _i, _len, _ref;
    markers = [];
    _ref = this.markersContainer.find('.planit-marker');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      m = $(marker);
      marker = {
        coords: [m.position().left, m.position().top]
      };
      info = m.find('.planit-infobox');
      if (info.length > 0) {
        marker.infobox = info.html();
      }
      markers.push(marker);
    }
    return markers;
  };

  return Plan;

})();

Planit.Plan.Events = (function() {
  function Events(_at_options) {
    this.options = _at_options;
    this.mousemove = __bind(this.mousemove, this);
    this.mouseup = __bind(this.mouseup, this);
    this.lastMarker = __bind(this.lastMarker, this);
    this.draggingMarker = __bind(this.draggingMarker, this);
    this.markers = __bind(this.markers, this);
    this.container = this.options.container;
    this.markersContainer = this.container.find("." + Planit.markerContainerClass);
    $(document).on('mousemove', this.mousemove);
    $(document).on('mouseup', this.mouseup);
  }

  Events.prototype.markers = function() {
    return this.markersContainer.find('.planit-marker');
  };

  Events.prototype.draggingMarker = function() {
    return this.markersContainer.find('.planit-marker.is-dragging');
  };

  Events.prototype.lastMarker = function() {
    return this.markers().last();
  };

  Events.prototype.mouseup = function(e) {
    var m, marker;
    if ($(e.target).hasClass('planit-marker-content')) {
      marker = $(e.target).closest('.planit-marker');
      $("#" + (marker.attr('data-infobox'))).addClass('active');
    }
    if (this.draggingMarker().length > 0) {
      m = new Planit.Marker(this.container, marker.attr('data-marker'));
      this.options.planit.dragEnd(e, m);
      return this.draggingMarker().removeClass('is-dragging');
    }
  };

  Events.prototype.mousemove = function(e) {
    var marker, markerBottom, markerHeight, markerLeft, markerRight, markerTop, markerWidth, markerX, markerY, markers, mouseLeft, mouseTop, planBottom, planRight;
    markers = this.markersContainer.find('.planit-marker.is-dragging');
    if (markers.length > 0) {
      marker = markers.first();
      mouseLeft = e.pageX - this.container.offset().left;
      mouseTop = e.pageY - this.container.offset().top;
      planRight = this.container.width();
      planBottom = this.container.height();
      markerLeft = mouseLeft - (marker.outerWidth() / 2);
      markerTop = mouseTop - (marker.outerHeight() / 2);
      markerRight = mouseLeft + (marker.outerWidth() / 2);
      markerBottom = mouseTop + (marker.outerHeight() / 2);
      markerWidth = marker.outerWidth();
      markerHeight = marker.outerHeight();
      if (markerLeft <= 0) {
        markerX = 0;
      } else if (markerRight < planRight) {
        markerX = markerLeft;
      } else {
        markerX = planRight - markerWidth;
      }
      if (markerTop <= 0) {
        markerY = 0;
      } else if (markerBottom < planBottom) {
        markerY = markerTop;
      } else {
        markerY = planBottom - markerHeight;
      }
      return marker.css({
        left: markerX,
        top: markerY
      });
    }
  };

  return Events;

})();

Planit.Marker = (function() {
  function Marker(_at_container, id) {
    this.container = _at_container;
    this.position = __bind(this.position, this);
    this.markersContainer = this.container.find("." + Planit.markerContainerClass);
    this.marker = this.markersContainer.find("." + Planit.markerClass + "[data-marker='" + id + "']").first();
    this;
  }

  Marker.prototype.position = function() {
    var xPc, xPx, yPc, yPx;
    xPx = this.marker.position().left + (this.marker.outerWidth() / 2);
    yPx = this.marker.position().top + (this.marker.outerHeight() / 2);
    xPc = xPx / this.container.width();
    yPc = yPx / this.container.height();
    return [xPc, yPc];
  };

  return Marker;

})();

Planit.Marker.Events = (function() {
  function Events(_at_options) {
    var id, infobox;
    this.options = _at_options;
    this.container = this.options.container;
    this.markersContainer = this.container.find("." + Planit.markerContainerClass);
    this.marker = this.markersContainer.find("." + Planit.markerClass + "[data-marker='" + this.options.id + "']").first();
    if (this.options.draggable) {
      this.lastMarker().addClass('draggable');
      this.lastMarker().on('mousedown', (function(_this) {
        return function(e) {
          var infoboxID, marker;
          marker = $(e.target).closest('.planit-marker');
          marker.addClass('is-dragging');
          infoboxID = $(e.target).closest('.planit-marker').attr('data-infobox');
          return $("#" + infoboxID).removeClass('active');
        };
      })(this));
    }
    if (this.options.infobox) {
      id = Planit.randomString(16);
      this.lastMarker().find('.planit-marker-content').append("<div class=\"planit-infobox\" id=\"info-" + id + "\">" + this.options.infobox + "</div>");
      this.lastMarker().attr('data-infobox', "info-" + id);
      infobox = $("#" + (this.lastMarker().attr('data-infobox')));
      infobox.css({
        left: -(infobox.width() / 2),
        bottom: infobox.outerHeight() + 5
      });
      this.lastMarker().on('mouseleave', (function(_this) {
        return function(e) {
          var marker;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          return infobox.removeClass('active');
        };
      })(this));
      this.lastMarker().on('mouseover', (function(_this) {
        return function(e) {
          var marker;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          if (marker.hasClass('is-dragging') || _this.draggingMarker().length > 0) {
            return infobox.removeClass('active');
          } else {
            return infobox.addClass('active');
          }
        };
      })(this));
    }
  }

  Events.prototype.markers = function() {
    return this.markersContainer.find('.planit-marker');
  };

  Events.prototype.draggingMarker = function() {
    return this.markersContainer.find('.planit-marker.is-dragging');
  };

  Events.prototype.lastMarker = function() {
    return this.markers().last();
  };

  return Events;

})();

Planit.Marker.Creator = (function() {
  function Creator(_at_options) {
    this.options = _at_options;
    this.container = this.options.container;
    this.markersContainer = this.container.find("." + Planit.markerContainerClass).first();
    if (!this.options.id) {
      this.options.id = Planit.randomString(20);
    }
    this.markersContainer.append($('<div><div class="planit-marker-content"></div></div>').addClass('planit-marker').attr('data-marker', this.options.id).css({
      left: this.options.coords[0] + "%",
      top: this.options.coords[1] + "%"
    }));
    new Planit.Marker.Events(this.options);
    new Planit.Marker(this.container, this.options.id);
  }

  return Creator;

})();

//# sourceMappingURL=data:application/json;base64,