var Planit,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Planit = (function() {
  function Planit() {}

  Planit.prototype["new"] = function(_at_options) {
    this.options = _at_options;
    if (!this.options) {
      this.options = {};
    }
    this.setOptions();
    this.initPlan();
    return this.initMarkers();
  };

  Planit.prototype.setOptions = function() {
    this.setDefaultOptions();
    if (this.options.container) {
      return this.container = $("#" + this.options.container);
    }
  };

  Planit.prototype.setDefaultOptions = function() {
    return this.container = $('#planit');
  };

  Planit.prototype.initPlan = function() {
    return this.plan = new Planit.Plan({
      container: this.container
    });
  };

  Planit.prototype.initMarkers = function() {
    var marker, _i, _len, _ref, _results;
    this.markers = new Planit.Marker({
      plan: this.container
    });
    _ref = this.options.markers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      marker = _ref[_i];
      _results.push(this.markers.add(marker));
    }
    return _results;
  };

  return Planit;

})();

window.planit = new Planit;

Planit.Plan = (function() {
  function Plan(_at_options) {
    this.options = _at_options;
    this.initContainers();
  }

  Plan.prototype.initContainers = function() {
    this.options.container.addClass('planit-container');
    return this.options.container.append("<div class=\"planit-markers-container\"></div>");
  };

  return Plan;

})();

Planit.Marker = (function() {
  function Marker(_at_options) {
    this.options = _at_options;
    this.mousemove = __bind(this.mousemove, this);
    this.mouseup = __bind(this.mouseup, this);
    this.mousedown = __bind(this.mousedown, this);
    this.setOptions();
    this.bindDraggable();
  }

  Marker.prototype.setOptions = function() {
    this.plan = this.options.plan;
    return this.markersContainer = this.plan.find('.planit-markers-container');
  };

  Marker.prototype.add = function(options) {
    var id, infobox;
    this.markersContainer.append($('<div></div>').addClass('planit-marker').css({
      left: options.coords[0] + "%",
      top: options.coords[1] + "%"
    }));
    if (options.draggable) {
      this.lastMarker().addClass('draggable');
      this.lastMarker().on('mousedown', this.mousedown);
    }
    if (options.infobox) {
      id = this.randomString(16);
      this.lastMarker().after("<div class=\"planit-infobox-container\" id=\"info-" + id + "\">\n  <div class=\"planit-infobox\">\n    " + options.infobox + "\n  </div>\n</div>");
      this.lastMarker().attr('data-infobox', "info-" + id);
      infobox = $("#" + (this.lastMarker().attr('data-infobox')));
      infobox.on('mouseleave', (function(_this) {
        return function(e) {
          return $(e.target).closest('.planit-infobox-container').hide();
        };
      })(this));
      this.lastMarker().on('mouseover', (function(_this) {
        return function(e) {
          var left, marker, top;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          if (marker.hasClass('is-dragging') || _this.draggingMarker().length > 0) {
            return infobox.hide();
          } else {
            left = marker.position().left - (infobox.outerWidth() / 2) + 15;
            top = marker.position().top - infobox.outerHeight() - 5;
            infobox.css({
              left: left,
              top: top
            });
            return infobox.show();
          }
        };
      })(this));
      return this.lastMarker().on('mouseout', (function(_this) {
        return function(e) {
          var infoboxID;
          if (!$(e.relatedTarget).hasClass('planit-infobox')) {
            infoboxID = $(e.target).closest('.planit-marker').attr('data-infobox');
            return $("#" + infoboxID).hide();
          }
        };
      })(this));
    }
  };

  Marker.prototype.mousedown = function(e) {
    var infoboxID;
    $(e.target).addClass('is-dragging');
    infoboxID = $(e.target).closest('.planit-marker').attr('data-infobox');
    return $("#" + infoboxID).hide();
  };

  Marker.prototype.mouseup = function(e) {
    return this.draggingMarker().removeClass('is-dragging');
  };

  Marker.prototype.mousemove = function(e) {
    var marker, markerBottom, markerHeight, markerLeft, markerRight, markerTop, markerWidth, markerX, markerY, markers, mouseLeft, mouseTop, planBottom, planRight;
    markers = this.markersContainer.find('.planit-marker.is-dragging');
    if (markers.length > 0) {
      marker = markers.first();
      mouseLeft = e.pageX - this.plan.offset().left;
      mouseTop = e.pageY - this.plan.offset().top;
      planRight = this.plan.width();
      planBottom = this.plan.height();
      markerLeft = mouseLeft - (marker.outerWidth() / 2);
      markerTop = mouseTop - (marker.outerHeight() / 2);
      markerRight = mouseLeft + (marker.outerWidth() / 2);
      markerBottom = mouseTop + (marker.outerHeight() / 2);
      markerWidth = marker.outerWidth();
      markerHeight = marker.outerHeight();
      if (markerLeft <= 0) {
        markerX = 0;
      } else if (markerRight < planRight) {
        markerX = markerLeft;
      } else {
        markerX = planRight - markerWidth;
      }
      if (markerTop <= 0) {
        markerY = 0;
      } else if (markerBottom < planBottom) {
        markerY = markerTop;
      } else {
        markerY = planBottom - markerHeight;
      }
      return marker.css({
        left: markerX,
        top: markerY
      });
    }
  };

  Marker.prototype.bindDraggable = function() {
    $(document).on('mousemove', this.mousemove);
    return $(document).on('mouseup', this.mouseup);
  };

  Marker.prototype.markers = function() {
    return this.markersContainer.find('.planit-marker');
  };

  Marker.prototype.draggingMarker = function() {
    return this.markersContainer.find('.planit-marker.is-dragging');
  };

  Marker.prototype.lastMarker = function() {
    return this.markers().last();
  };

  Marker.prototype.randomString = function(length) {
    var str;
    if (length == null) {
      length = 16;
    }
    str = Math.random().toString(36).slice(2);
    str = str + Math.random().toString(36).slice(2);
    return str.substring(0, length - 1);
  };

  return Marker;

})();

//# sourceMappingURL=data:application/json;base64,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QUMsRUFBWixDQUFnQixTQUFoQixFQUEwQixJQUFDLENBQUEsT0FBM0IsRUFGYTtFQUFBLENBekdmLENBQUE7O0FBQUEsbUJBNkdBLE9BQUEsR0FBUyxTQUFBLEdBQUE7V0FDUCxJQUFDLENBQUEsZ0JBQWdCLENBQUMsSUFBbEIsQ0FBd0IsZ0JBQXhCLEVBRE87RUFBQSxDQTdHVCxDQUFBOztBQUFBLG1CQWdIQSxjQUFBLEdBQWdCLFNBQUEsR0FBQTtXQUNkLElBQUMsQ0FBQSxnQkFBZ0IsQ0FBQyxJQUFsQixDQUF3Qiw0QkFBeEIsRUFEYztFQUFBLENBaEhoQixDQUFBOztBQUFBLG1CQW1IQSxVQUFBLEdBQVksU0FBQSxHQUFBO1dBQ1YsSUFBQyxDQUFBLE9BQUQsQ0FBQSxDQUFVLENBQUMsSUFBWCxDQUFBLEVBRFU7RUFBQSxDQW5IWixDQUFBOztBQUFBLG1CQXNIQSxZQUFBLEdBQWMsU0FBQyxNQUFELEdBQUE7QUFDWixRQUFBLEdBQUE7O01BRGEsU0FBUztLQUN0QjtBQUFBLElBQUEsR0FBQSxHQUFNLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBYSxDQUFDLFFBQWQsQ0FBdUIsRUFBdkIsQ0FBMEIsQ0FBQyxLQUEzQixDQUFpQyxDQUFqQyxDQUFOLENBQUE7QUFBQSxJQUNBLEdBQUEsR0FBTSxHQUFBLEdBQU0sSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFhLENBQUMsUUFBZCxDQUF1QixFQUF2QixDQUEwQixDQUFDLEtBQTNCLENBQWlDLENBQWpDLENBRFosQ0FBQTtXQUVBLEdBQUcsQ0FBQyxTQUFKLENBQWMsQ0FBZCxFQUFpQixNQUFBLEdBQVMsQ0FBMUIsRUFIWTtFQUFBLENBdEhkLENBQUE7O2dCQUFBOztJQXZDRixDQUFBIiwiZmlsZSI6InBsYW5pdC10bXAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQbGFuaXRcblxuICBuZXc6IChAb3B0aW9ucykgLT5cbiAgICBAb3B0aW9ucyA9IHt9IHVubGVzcyBAb3B0aW9uc1xuICAgIEBzZXRPcHRpb25zKClcbiAgICBAaW5pdFBsYW4oKVxuICAgIEBpbml0TWFya2VycygpXG5cbiAgc2V0T3B0aW9uczogLT5cbiAgICBAc2V0RGVmYXVsdE9wdGlvbnMoKVxuICAgIEBjb250YWluZXIgPSAkKFwiIyN7QG9wdGlvbnMuY29udGFpbmVyfVwiKSBpZiBAb3B0aW9ucy5jb250YWluZXJcblxuICBzZXREZWZhdWx0T3B0aW9uczogLT5cbiAgICBAY29udGFpbmVyID0gJCgnI3BsYW5pdCcpXG5cbiAgaW5pdFBsYW46IC0+XG4gICAgQHBsYW4gPSBuZXcgUGxhbml0LlBsYW5cbiAgICAgIGNvbnRhaW5lcjogQGNvbnRhaW5lclxuXG4gIGluaXRNYXJrZXJzOiAtPlxuICAgIEBtYXJrZXJzID0gbmV3IFBsYW5pdC5NYXJrZXJcbiAgICAgIHBsYW46IEBjb250YWluZXJcbiAgICBmb3IgbWFya2VyIGluIEBvcHRpb25zLm1hcmtlcnNcbiAgICAgIEBtYXJrZXJzLmFkZChtYXJrZXIpXG5cbndpbmRvdy5wbGFuaXQgPSBuZXcgUGxhbml0XG5cbmNsYXNzIFBsYW5pdC5QbGFuXG5cbiAgY29uc3RydWN0b3I6IChAb3B0aW9ucykgLT5cbiAgICBAaW5pdENvbnRhaW5lcnMoKVxuXG4gIGluaXRDb250YWluZXJzOiAtPlxuICAgIEBvcHRpb25zLmNvbnRhaW5lci5hZGRDbGFzcygncGxhbml0LWNvbnRhaW5lcicpXG4gICAgQG9wdGlvbnMuY29udGFpbmVyLmFwcGVuZChcIlwiXCI8ZGl2IGNsYXNzPVwicGxhbml0LW1hcmtlcnMtY29udGFpbmVyXCI+PC9kaXY+XCJcIlwiKVxuXG5cbmNsYXNzIFBsYW5pdC5NYXJrZXJcblxuICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zKSAtPlxuICAgIEBzZXRPcHRpb25zKClcbiAgICBAYmluZERyYWdnYWJsZSgpXG5cbiAgc2V0T3B0aW9uczogLT5cbiAgICBAcGxhbiA9IEBvcHRpb25zLnBsYW5cbiAgICBAbWFya2Vyc0NvbnRhaW5lciA9IEBwbGFuLmZpbmQoJy5wbGFuaXQtbWFya2Vycy1jb250YWluZXInKVxuXG4gIGFkZDogKG9wdGlvbnMpIC0+XG4gICAgQG1hcmtlcnNDb250YWluZXIuYXBwZW5kKCQoJzxkaXY+PC9kaXY+JylcbiAgICAgIC5hZGRDbGFzcygncGxhbml0LW1hcmtlcicpXG4gICAgICAuY3NzKFxuICAgICAgICBsZWZ0OiBcIiN7b3B0aW9ucy5jb29yZHNbMF19JVwiXG4gICAgICAgIHRvcDogXCIje29wdGlvbnMuY29vcmRzWzFdfSVcIlxuICAgICAgKVxuICAgIClcbiAgICBpZiBvcHRpb25zLmRyYWdnYWJsZVxuICAgICAgQGxhc3RNYXJrZXIoKS5hZGRDbGFzcygnZHJhZ2dhYmxlJylcbiAgICAgIEBsYXN0TWFya2VyKCkub24oJ21vdXNlZG93bicsIEBtb3VzZWRvd24pXG4gICAgaWYgb3B0aW9ucy5pbmZvYm94XG4gICAgICBpZCA9IEByYW5kb21TdHJpbmcoMTYpXG4gICAgICBAbGFzdE1hcmtlcigpLmFmdGVyIFwiXCJcIlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGxhbml0LWluZm9ib3gtY29udGFpbmVyXCIgaWQ9XCJpbmZvLSN7aWR9XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInBsYW5pdC1pbmZvYm94XCI+XG4gICAgICAgICAgICAje29wdGlvbnMuaW5mb2JveH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXCJcIlwiXG4gICAgICBAbGFzdE1hcmtlcigpLmF0dHIoJ2RhdGEtaW5mb2JveCcsIFwiaW5mby0je2lkfVwiKVxuICAgICAgaW5mb2JveCA9ICQoXCIjI3tAbGFzdE1hcmtlcigpLmF0dHIoJ2RhdGEtaW5mb2JveCcpfVwiKVxuICAgICAgaW5mb2JveC5vbiAnbW91c2VsZWF2ZScsIChlKSA9PlxuICAgICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcucGxhbml0LWluZm9ib3gtY29udGFpbmVyJykuaGlkZSgpXG4gICAgICBAbGFzdE1hcmtlcigpLm9uICdtb3VzZW92ZXInLCAoZSkgPT5cbiAgICAgICAgbWFya2VyID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLnBsYW5pdC1tYXJrZXInKVxuICAgICAgICBpbmZvYm94ID0gJChcIiMje21hcmtlci5hdHRyKCdkYXRhLWluZm9ib3gnKX1cIilcbiAgICAgICAgaWYgbWFya2VyLmhhc0NsYXNzKCdpcy1kcmFnZ2luZycpIHx8IEBkcmFnZ2luZ01hcmtlcigpLmxlbmd0aCA+IDBcbiAgICAgICAgICBpbmZvYm94LmhpZGUoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgbGVmdCA9IG1hcmtlci5wb3NpdGlvbigpLmxlZnQgLSAoaW5mb2JveC5vdXRlcldpZHRoKCkgLyAyKSArIDE1XG4gICAgICAgICAgdG9wID0gbWFya2VyLnBvc2l0aW9uKCkudG9wIC0gaW5mb2JveC5vdXRlckhlaWdodCgpIC0gNVxuICAgICAgICAgIGluZm9ib3guY3NzXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICAgICAgICB0b3A6IHRvcFxuICAgICAgICAgIGluZm9ib3guc2hvdygpXG4gICAgICBAbGFzdE1hcmtlcigpLm9uICdtb3VzZW91dCcsIChlKSA9PlxuICAgICAgICB1bmxlc3MgJChlLnJlbGF0ZWRUYXJnZXQpLmhhc0NsYXNzKCdwbGFuaXQtaW5mb2JveCcpXG4gICAgICAgICAgaW5mb2JveElEID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLnBsYW5pdC1tYXJrZXInKS5hdHRyKCdkYXRhLWluZm9ib3gnKVxuICAgICAgICAgICQoXCIjI3tpbmZvYm94SUR9XCIpLmhpZGUoKVxuXG4gIG1vdXNlZG93bjogKGUpID0+XG4gICAgJChlLnRhcmdldCkuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJylcbiAgICBpbmZvYm94SUQgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcucGxhbml0LW1hcmtlcicpLmF0dHIoJ2RhdGEtaW5mb2JveCcpXG4gICAgJChcIiMje2luZm9ib3hJRH1cIikuaGlkZSgpXG5cbiAgbW91c2V1cDogKGUpID0+XG4gICAgQGRyYWdnaW5nTWFya2VyKCkucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJylcblxuICBtb3VzZW1vdmU6IChlKSA9PlxuICAgIG1hcmtlcnMgPSBAbWFya2Vyc0NvbnRhaW5lci5maW5kKCcucGxhbml0LW1hcmtlci5pcy1kcmFnZ2luZycpXG4gICAgaWYgbWFya2Vycy5sZW5ndGggPiAwXG5cbiAgICAgICMgb25seSB1c2UgZmlyc3QgbWFya2VyIGluIGNhc2UgdGhlcmUgYXJlIG1vcmUgdGhhblxuICAgICAgIyBvbmUgZHJhZ2dpbmdcbiAgICAgICMgXG4gICAgICBtYXJrZXIgPSBtYXJrZXJzLmZpcnN0KClcblxuICAgICAgIyBjYWxjdWxhdGUgcG9zaXRpb25zXG4gICAgICAjIFxuICAgICAgbW91c2VMZWZ0ICAgICA9IGUucGFnZVggLSBAcGxhbi5vZmZzZXQoKS5sZWZ0XG4gICAgICBtb3VzZVRvcCAgICAgID0gZS5wYWdlWSAtIEBwbGFuLm9mZnNldCgpLnRvcFxuICAgICAgcGxhblJpZ2h0ICAgICA9IEBwbGFuLndpZHRoKClcbiAgICAgIHBsYW5Cb3R0b20gICAgPSBAcGxhbi5oZWlnaHQoKVxuICAgICAgbWFya2VyTGVmdCAgICA9IG1vdXNlTGVmdCAtIChtYXJrZXIub3V0ZXJXaWR0aCgpIC8gMilcbiAgICAgIG1hcmtlclRvcCAgICAgPSBtb3VzZVRvcCAtIChtYXJrZXIub3V0ZXJIZWlnaHQoKSAvIDIpXG4gICAgICBtYXJrZXJSaWdodCAgID0gbW91c2VMZWZ0ICsgKG1hcmtlci5vdXRlcldpZHRoKCkgLyAyKVxuICAgICAgbWFya2VyQm90dG9tICA9IG1vdXNlVG9wICsgKG1hcmtlci5vdXRlckhlaWdodCgpIC8gMilcbiAgICAgIG1hcmtlcldpZHRoICAgPSBtYXJrZXIub3V0ZXJXaWR0aCgpXG4gICAgICBtYXJrZXJIZWlnaHQgID0gbWFya2VyLm91dGVySGVpZ2h0KClcblxuICAgICAgIyBmaW5kIHRoZSBsZWZ0IHBvc2l0aW9uIG9mIHRoZSBtYXJrZXIgYmFzZWQgb25cbiAgICAgICMgcG9zaXRpb24gb2YgdGhlIG1vdXNlIHJlbGF0aXZlIHRvIHRoZSBwbGFuXG4gICAgICAjIFxuICAgICAgaWYgbWFya2VyTGVmdCA8PSAwXG4gICAgICAgIG1hcmtlclggPSAwXG4gICAgICBlbHNlIGlmIG1hcmtlclJpZ2h0IDwgcGxhblJpZ2h0XG4gICAgICAgIG1hcmtlclggPSBtYXJrZXJMZWZ0XG4gICAgICBlbHNlXG4gICAgICAgIG1hcmtlclggPSBwbGFuUmlnaHQgLSBtYXJrZXJXaWR0aFxuXG4gICAgICAjIGZpbmQgdGhlIGxlZnQgcG9zaXRpb24gb2YgdGhlIG1hcmtlciBiYXNlZCBvblxuICAgICAgIyBwb3NpdGlvbiBvZiB0aGUgbW91c2UgcmVsYXRpdmUgdG8gdGhlIHBsYW5cbiAgICAgICMgXG4gICAgICBpZiBtYXJrZXJUb3AgPD0gMFxuICAgICAgICBtYXJrZXJZID0gMFxuICAgICAgZWxzZSBpZiBtYXJrZXJCb3R0b20gPCBwbGFuQm90dG9tXG4gICAgICAgIG1hcmtlclkgPSBtYXJrZXJUb3BcbiAgICAgIGVsc2VcbiAgICAgICAgbWFya2VyWSA9IHBsYW5Cb3R0b20gLSBtYXJrZXJIZWlnaHRcblxuICAgICAgIyBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBtYXJrZXJcbiAgICAgICMgXG4gICAgICBtYXJrZXIuY3NzXG4gICAgICAgIGxlZnQ6IG1hcmtlclhcbiAgICAgICAgdG9wOiBtYXJrZXJZXG5cbiAgYmluZERyYWdnYWJsZTogLT5cbiAgICAkKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlJywgQG1vdXNlbW92ZSlcbiAgICAkKGRvY3VtZW50KS5vbignbW91c2V1cCcsIEBtb3VzZXVwKVxuXG4gIG1hcmtlcnM6IC0+XG4gICAgQG1hcmtlcnNDb250YWluZXIuZmluZCgnLnBsYW5pdC1tYXJrZXInKVxuXG4gIGRyYWdnaW5nTWFya2VyOiAtPlxuICAgIEBtYXJrZXJzQ29udGFpbmVyLmZpbmQoJy5wbGFuaXQtbWFya2VyLmlzLWRyYWdnaW5nJylcblxuICBsYXN0TWFya2VyOiAtPlxuICAgIEBtYXJrZXJzKCkubGFzdCgpXG5cbiAgcmFuZG9tU3RyaW5nOiAobGVuZ3RoID0gMTYpIC0+XG4gICAgc3RyID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMikgXG4gICAgc3RyID0gc3RyICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMilcbiAgICBzdHIuc3Vic3RyaW5nKDAsIGxlbmd0aCAtIDEpXG4iXX0=