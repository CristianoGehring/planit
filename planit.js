var Planit,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Planit = (function() {
  function Planit() {
    this.addMarker = __bind(this.addMarker, this);
  }

  Planit.prototype["new"] = function(_at_options) {
    this.options = _at_options;
    if (!this.options) {
      this.options = {};
    }
    this.planOptions = {
      container: $('#planit')
    };
    if (this.options.container) {
      this.planOptions.container = $("#" + this.options.container);
    }
    if (this.options.backgroundImage) {
      this.planOptions.backgroundImage = this.options.backgroundImage;
    }
    this.plan = new Planit.Plan(this.planOptions);
    if (this.options.markers) {
      $(window).load((function(_this) {
        return function() {
          var marker, _i, _len, _ref, _results;
          _ref = _this.options.markers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            marker = _ref[_i];
            _results.push(_this.addMarker(marker));
          }
          return _results;
        };
      })(this));
    }
    return this;
  };

  Planit.prototype.addMarker = function(options) {
    options.plan = this.planOptions.container;
    return new Planit.Marker(options);
  };

  return Planit;

})();

window.planit = new Planit;

Planit.Plan = (function() {
  function Plan(_at_options) {
    this.options = _at_options;
    this.initContainers();
    if (this.options.backgroundImage) {
      this.addBackgroundImage();
    }
  }

  Plan.prototype.initContainers = function() {
    this.options.container.addClass('planit-container');
    return this.options.container.append("<div class=\"planit-markers-container\"></div>");
  };

  Plan.prototype.addBackgroundImage = function() {
    this.options.container.append("<img src=\"" + this.options.backgroundImage + "\">");
    this.options.container.find('.planit-markers-container').css({
      backgroundImage: "url('" + this.options.backgroundImage + "')"
    });
    return $(window).load((function(_this) {
      return function() {
        _this.options.container.css({
          height: _this.options.container.find('img').first().height()
        });
        return _this.options.container.find('img').first().remove();
      };
    })(this));
  };

  return Plan;

})();

Planit.Marker = (function() {
  function Marker(_at_options) {
    var id, infobox;
    this.options = _at_options;
    this.mousemove = __bind(this.mousemove, this);
    this.mouseup = __bind(this.mouseup, this);
    this.mousedown = __bind(this.mousedown, this);
    this.plan = this.options.plan;
    this.markersContainer = this.plan.find('.planit-markers-container');
    $(document).on('mousemove', this.mousemove);
    $(document).on('mouseup', this.mouseup);
    this.markersContainer.append($('<div><div class="planit-marker-content"></div></div>').addClass('planit-marker').css({
      left: this.options.coords[0] + "%",
      top: this.options.coords[1] + "%"
    }));
    if (this.options.draggable) {
      this.lastMarker().addClass('draggable');
      this.lastMarker().on('mousedown', this.mousedown);
    }
    if (this.options.infobox) {
      id = this.randomString(16);
      this.lastMarker().find('.planit-marker-content').append("<div class=\"planit-infobox\" id=\"info-" + id + "\">" + this.options.infobox + "</div>");
      this.lastMarker().attr('data-infobox', "info-" + id);
      infobox = $("#" + (this.lastMarker().attr('data-infobox')));
      infobox.css({
        left: -(infobox.width() / 2),
        bottom: infobox.outerHeight() + 5
      });
      this.lastMarker().on('mouseleave', (function(_this) {
        return function(e) {
          var marker;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          return infobox.removeClass('active');
        };
      })(this));
      this.lastMarker().on('mouseover', (function(_this) {
        return function(e) {
          var marker;
          marker = $(e.target).closest('.planit-marker');
          infobox = $("#" + (marker.attr('data-infobox')));
          if (marker.hasClass('is-dragging') || _this.draggingMarker().length > 0) {
            return infobox.removeClass('active');
          } else {
            return infobox.addClass('active');
          }
        };
      })(this));
    }
  }

  Marker.prototype.mousedown = function(e) {
    var infoboxID, marker;
    marker = $(e.target).closest('.planit-marker');
    marker.addClass('is-dragging');
    infoboxID = $(e.target).closest('.planit-marker').attr('data-infobox');
    return $("#" + infoboxID).removeClass('active');
  };

  Marker.prototype.mouseup = function(e) {
    var marker;
    if ($(e.target).hasClass('planit-marker-content')) {
      marker = $(e.target).closest('.planit-marker');
      $("#" + (marker.attr('data-infobox'))).addClass('active');
    }
    return this.draggingMarker().removeClass('is-dragging');
  };

  Marker.prototype.mousemove = function(e) {
    var marker, markerBottom, markerHeight, markerLeft, markerRight, markerTop, markerWidth, markerX, markerY, markers, mouseLeft, mouseTop, planBottom, planRight;
    markers = this.markersContainer.find('.planit-marker.is-dragging');
    if (markers.length > 0) {
      marker = markers.first();
      mouseLeft = e.pageX - this.plan.offset().left;
      mouseTop = e.pageY - this.plan.offset().top;
      planRight = this.plan.width();
      planBottom = this.plan.height();
      markerLeft = mouseLeft - (marker.outerWidth() / 2);
      markerTop = mouseTop - (marker.outerHeight() / 2);
      markerRight = mouseLeft + (marker.outerWidth() / 2);
      markerBottom = mouseTop + (marker.outerHeight() / 2);
      markerWidth = marker.outerWidth();
      markerHeight = marker.outerHeight();
      if (markerLeft <= 0) {
        markerX = 0;
      } else if (markerRight < planRight) {
        markerX = markerLeft;
      } else {
        markerX = planRight - markerWidth;
      }
      if (markerTop <= 0) {
        markerY = 0;
      } else if (markerBottom < planBottom) {
        markerY = markerTop;
      } else {
        markerY = planBottom - markerHeight;
      }
      return marker.css({
        left: markerX,
        top: markerY
      });
    }
  };

  Marker.prototype.markers = function() {
    return this.markersContainer.find('.planit-marker');
  };

  Marker.prototype.draggingMarker = function() {
    return this.markersContainer.find('.planit-marker.is-dragging');
  };

  Marker.prototype.lastMarker = function() {
    return this.markers().last();
  };

  Marker.prototype.randomString = function(length) {
    var str;
    if (length == null) {
      length = 16;
    }
    str = Math.random().toString(36).slice(2);
    str = str + Math.random().toString(36).slice(2);
    return str.substring(0, length - 1);
  };

  return Marker;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYW5pdC10bXAuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsTUFBQTtFQUFBLGtGQUFBOztBQUFBOzs7R0FJRTs7QUFBQSxtQkFBQSxNQUFBLEdBQUssU0FBQyxXQUFELEdBQUE7QUFHSCxJQUhJLElBQUMsQ0FBQSxVQUFELFdBR0osQ0FBQTtBQUFBLElBQUEsSUFBQSxDQUFBLElBQXNCLENBQUEsT0FBdEI7QUFBQSxNQUFBLElBQUMsQ0FBQSxPQUFELEdBQVcsRUFBWCxDQUFBO0tBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxXQUFELEdBQ0U7QUFBQSxNQUFBLFNBQUEsRUFBVyxDQUFBLENBQUcsU0FBSCxDQUFYO0tBRkYsQ0FBQTtBQUtBLElBQUEsSUFBd0QsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFqRTtBQUFBLE1BQUEsSUFBQyxDQUFBLFdBQVcsQ0FBQyxTQUFiLEdBQXlCLENBQUEsQ0FBRyxHQUFBLEdBQUcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFmLENBQXpCLENBQUE7S0FMQTtBQU1BLElBQUEsSUFBMkQsSUFBQyxDQUFBLE9BQU8sQ0FBQyxlQUFwRTtBQUFBLE1BQUEsSUFBQyxDQUFBLFdBQVcsQ0FBQyxlQUFiLEdBQStCLElBQUMsQ0FBQSxPQUFPLENBQUMsZUFBeEMsQ0FBQTtLQU5BO0FBQUEsSUFTQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsV0FBYixDQVRaLENBQUE7QUFZQSxJQUFBLElBQUcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxPQUFaO0FBQ0UsTUFBQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsSUFBVixDQUFlLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFBLEdBQUE7QUFDYixjQUFBLGdDQUFBO0FBQUE7QUFBQTtlQUFBLDJDQUFBOzhCQUFBO0FBQUEsMEJBQUEsS0FBQyxDQUFBLFNBQUQsQ0FBVyxNQUFYLEVBQUEsQ0FBQTtBQUFBOzBCQURhO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZixDQUFBLENBREY7S0FaQTtXQWlCQSxLQXBCRztFQUFBLENBQUwsQ0FBQTs7QUFBQSxtQkF3QkEsU0FBQSxHQUFXLFNBQUMsT0FBRCxHQUFBO0FBQ1QsSUFBQSxPQUFPLENBQUMsSUFBUixHQUFlLElBQUMsQ0FBQSxXQUFXLENBQUMsU0FBNUIsQ0FBQTtXQUNJLElBQUEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxPQUFkLEVBRks7RUFBQSxDQXhCWCxDQUFBOztnQkFBQTs7SUFKRixDQUFBOztBQUFBLE1BaUNNLENBQUMsTUFBUCxHQUFnQixHQUFBLENBQUEsTUFqQ2hCLENBQUE7O0FBQUEsTUFtQ1ksQ0FBQztBQUVFLEVBQUEsY0FBQyxXQUFELEdBQUE7QUFDWCxJQURZLElBQUMsQ0FBQSxVQUFELFdBQ1osQ0FBQTtBQUFBLElBQUEsSUFBQyxDQUFBLGNBQUQsQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLElBQXlCLElBQUMsQ0FBQSxPQUFPLENBQUMsZUFBbEM7QUFBQSxNQUFBLElBQUMsQ0FBQSxrQkFBRCxDQUFBLENBQUEsQ0FBQTtLQUZXO0VBQUEsQ0FBYjs7QUFBQSxpQkFJQSxjQUFBLEdBQWdCLFNBQUEsR0FBQTtBQUNkLElBQUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBbkIsQ0FBNkIsa0JBQTdCLENBQUEsQ0FBQTtXQUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQW5CLENBQTZCLGdEQUE3QixFQUZjO0VBQUEsQ0FKaEIsQ0FBQTs7QUFBQSxpQkFRQSxrQkFBQSxHQUFvQixTQUFBLEdBQUE7QUFDbEIsSUFBQSxJQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFuQixDQUE2QixhQUFBLEdBQVksSUFBQyxDQUFBLE9BQU8sQ0FBQyxlQUFyQixHQUFxQyxLQUFsRSxDQUFBLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQW5CLENBQXlCLDJCQUF6QixDQUFvRCxDQUFDLEdBQXJELENBQ0U7QUFBQSxNQUFBLGVBQUEsRUFBa0IsT0FBQSxHQUFPLElBQUMsQ0FBQSxPQUFPLENBQUMsZUFBaEIsR0FBZ0MsSUFBbEQ7S0FERixDQURBLENBQUE7V0FHQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsSUFBVixDQUFlLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFBLEdBQUE7QUFDYixRQUFBLEtBQUMsQ0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQW5CLENBQ0U7QUFBQSxVQUFBLE1BQUEsRUFBUSxLQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFuQixDQUF5QixLQUF6QixDQUE4QixDQUFDLEtBQS9CLENBQUEsQ0FBc0MsQ0FBQyxNQUF2QyxDQUFBLENBQVI7U0FERixDQUFBLENBQUE7ZUFFQSxLQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFuQixDQUF5QixLQUF6QixDQUE4QixDQUFDLEtBQS9CLENBQUEsQ0FBc0MsQ0FBQyxNQUF2QyxDQUFBLEVBSGE7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFmLEVBSmtCO0VBQUEsQ0FScEIsQ0FBQTs7Y0FBQTs7SUFyQ0YsQ0FBQTs7QUFBQSxNQXVEWSxDQUFDO0FBRUUsRUFBQSxnQkFBQyxXQUFELEdBQUE7QUFHWCxRQUFBLFdBQUE7QUFBQSxJQUhZLElBQUMsQ0FBQSxVQUFELFdBR1osQ0FBQTtBQUFBLGlEQUFBLENBQUE7QUFBQSw2Q0FBQSxDQUFBO0FBQUEsaURBQUEsQ0FBQTtBQUFBLElBQUEsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsT0FBTyxDQUFDLElBQWpCLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxnQkFBRCxHQUFvQixJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBWSwyQkFBWixDQURwQixDQUFBO0FBQUEsSUFJQSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsRUFBWixDQUFnQixXQUFoQixFQUE0QixJQUFDLENBQUEsU0FBN0IsQ0FKQSxDQUFBO0FBQUEsSUFLQSxDQUFBLENBQUUsUUFBRixDQUFXLENBQUMsRUFBWixDQUFnQixTQUFoQixFQUEwQixJQUFDLENBQUEsT0FBM0IsQ0FMQSxDQUFBO0FBQUEsSUFRQSxJQUFDLENBQUEsZ0JBQWdCLENBQUMsTUFBbEIsQ0FDRSxDQUFBLENBQUcsc0RBQUgsQ0FDRSxDQUFDLFFBREgsQ0FDYSxlQURiLENBRUUsQ0FBQyxHQUZILENBR0k7QUFBQSxNQUFBLElBQUEsRUFBUyxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQU8sQ0FBQSxDQUFBLENBQWpCLEdBQW9CLEdBQTVCO0FBQUEsTUFDQSxHQUFBLEVBQVEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFqQixHQUFvQixHQUQzQjtLQUhKLENBREYsQ0FSQSxDQUFBO0FBZUEsSUFBQSxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBWjtBQUNFLE1BQUEsSUFBQyxDQUFBLFVBQUQsQ0FBQSxDQUFhLENBQUMsUUFBZCxDQUF3QixXQUF4QixDQUFBLENBQUE7QUFBQSxNQUNBLElBQUMsQ0FBQSxVQUFELENBQUEsQ0FBYSxDQUFDLEVBQWQsQ0FBa0IsV0FBbEIsRUFBOEIsSUFBQyxDQUFBLFNBQS9CLENBREEsQ0FERjtLQWZBO0FBa0JBLElBQUEsSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLE9BQVo7QUFDRSxNQUFBLEVBQUEsR0FBSyxJQUFDLENBQUEsWUFBRCxDQUFjLEVBQWQsQ0FBTCxDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsVUFBRCxDQUFBLENBQWEsQ0FBQyxJQUFkLENBQW9CLHdCQUFwQixDQUE0QyxDQUFDLE1BQTdDLENBQXVELDBDQUFBLEdBQ2QsRUFEYyxHQUNYLEtBRFcsR0FDUCxJQUFDLENBQUEsT0FBTyxDQUFDLE9BREYsR0FDVSxRQURqRSxDQURBLENBQUE7QUFBQSxNQUlBLElBQUMsQ0FBQSxVQUFELENBQUEsQ0FBYSxDQUFDLElBQWQsQ0FBb0IsY0FBcEIsRUFBb0MsT0FBQSxHQUFPLEVBQTNDLENBSkEsQ0FBQTtBQUFBLE1BS0EsT0FBQSxHQUFVLENBQUEsQ0FBRyxHQUFBLEdBQUUsQ0FBQyxJQUFDLENBQUEsVUFBRCxDQUFBLENBQWEsQ0FBQyxJQUFkLENBQW9CLGNBQXBCLENBQUQsQ0FBTCxDQUxWLENBQUE7QUFBQSxNQU1BLE9BQU8sQ0FBQyxHQUFSLENBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxDQUFBLENBQUUsT0FBTyxDQUFDLEtBQVIsQ0FBQSxDQUFBLEdBQWtCLENBQW5CLENBQVA7QUFBQSxRQUNBLE1BQUEsRUFBUSxPQUFPLENBQUMsV0FBUixDQUFBLENBQUEsR0FBd0IsQ0FEaEM7T0FERixDQU5BLENBQUE7QUFBQSxNQVNBLElBQUMsQ0FBQSxVQUFELENBQUEsQ0FBYSxDQUFDLEVBQWQsQ0FBa0IsWUFBbEIsRUFBK0IsQ0FBQSxTQUFBLEtBQUEsR0FBQTtlQUFBLFNBQUMsQ0FBRCxHQUFBO0FBQzdCLGNBQUEsTUFBQTtBQUFBLFVBQUEsTUFBQSxHQUFTLENBQUEsQ0FBRSxDQUFDLENBQUMsTUFBSixDQUFXLENBQUMsT0FBWixDQUFxQixnQkFBckIsQ0FBVCxDQUFBO0FBQUEsVUFDQSxPQUFBLEdBQVUsQ0FBQSxDQUFHLEdBQUEsR0FBRSxDQUFDLE1BQU0sQ0FBQyxJQUFQLENBQWEsY0FBYixDQUFELENBQUwsQ0FEVixDQUFBO2lCQUVBLE9BQU8sQ0FBQyxXQUFSLENBQXFCLFFBQXJCLEVBSDZCO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBL0IsQ0FUQSxDQUFBO0FBQUEsTUFhQSxJQUFDLENBQUEsVUFBRCxDQUFBLENBQWEsQ0FBQyxFQUFkLENBQWtCLFdBQWxCLEVBQThCLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFDLENBQUQsR0FBQTtBQUM1QixjQUFBLE1BQUE7QUFBQSxVQUFBLE1BQUEsR0FBUyxDQUFBLENBQUUsQ0FBQyxDQUFDLE1BQUosQ0FBVyxDQUFDLE9BQVosQ0FBcUIsZ0JBQXJCLENBQVQsQ0FBQTtBQUFBLFVBQ0EsT0FBQSxHQUFVLENBQUEsQ0FBRyxHQUFBLEdBQUUsQ0FBQyxNQUFNLENBQUMsSUFBUCxDQUFhLGNBQWIsQ0FBRCxDQUFMLENBRFYsQ0FBQTtBQUVBLFVBQUEsSUFBRyxNQUFNLENBQUMsUUFBUCxDQUFpQixhQUFqQixDQUFBLElBQWtDLEtBQUMsQ0FBQSxjQUFELENBQUEsQ0FBaUIsQ0FBQyxNQUFsQixHQUEyQixDQUFoRTttQkFDRSxPQUFPLENBQUMsV0FBUixDQUFxQixRQUFyQixFQURGO1dBQUEsTUFBQTttQkFHRSxPQUFPLENBQUMsUUFBUixDQUFrQixRQUFsQixFQUhGO1dBSDRCO1FBQUEsRUFBQTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBOUIsQ0FiQSxDQURGO0tBckJXO0VBQUEsQ0FBYjs7QUFBQSxtQkEyQ0EsU0FBQSxHQUFXLFNBQUMsQ0FBRCxHQUFBO0FBQ1QsUUFBQSxpQkFBQTtBQUFBLElBQUEsTUFBQSxHQUFTLENBQUEsQ0FBRSxDQUFDLENBQUMsTUFBSixDQUFXLENBQUMsT0FBWixDQUFxQixnQkFBckIsQ0FBVCxDQUFBO0FBQUEsSUFDQSxNQUFNLENBQUMsUUFBUCxDQUFpQixhQUFqQixDQURBLENBQUE7QUFBQSxJQUVBLFNBQUEsR0FBWSxDQUFBLENBQUUsQ0FBQyxDQUFDLE1BQUosQ0FBVyxDQUFDLE9BQVosQ0FBcUIsZ0JBQXJCLENBQXFDLENBQUMsSUFBdEMsQ0FBNEMsY0FBNUMsQ0FGWixDQUFBO1dBR0EsQ0FBQSxDQUFHLEdBQUEsR0FBRyxTQUFOLENBQWtCLENBQUMsV0FBbkIsQ0FBZ0MsUUFBaEMsRUFKUztFQUFBLENBM0NYLENBQUE7O0FBQUEsbUJBaURBLE9BQUEsR0FBUyxTQUFDLENBQUQsR0FBQTtBQUNQLFFBQUEsTUFBQTtBQUFBLElBQUEsSUFBRyxDQUFBLENBQUUsQ0FBQyxDQUFDLE1BQUosQ0FBVyxDQUFDLFFBQVosQ0FBc0IsdUJBQXRCLENBQUg7QUFDRSxNQUFBLE1BQUEsR0FBUyxDQUFBLENBQUUsQ0FBQyxDQUFDLE1BQUosQ0FBVyxDQUFDLE9BQVosQ0FBcUIsZ0JBQXJCLENBQVQsQ0FBQTtBQUFBLE1BQ0EsQ0FBQSxDQUFHLEdBQUEsR0FBRSxDQUFDLE1BQU0sQ0FBQyxJQUFQLENBQWEsY0FBYixDQUFELENBQUwsQ0FBb0MsQ0FBQyxRQUFyQyxDQUErQyxRQUEvQyxDQURBLENBREY7S0FBQTtXQUdBLElBQUMsQ0FBQSxjQUFELENBQUEsQ0FBaUIsQ0FBQyxXQUFsQixDQUErQixhQUEvQixFQUpPO0VBQUEsQ0FqRFQsQ0FBQTs7QUFBQSxtQkF1REEsU0FBQSxHQUFXLFNBQUMsQ0FBRCxHQUFBO0FBQ1QsUUFBQSwwSkFBQTtBQUFBLElBQUEsT0FBQSxHQUFVLElBQUMsQ0FBQSxnQkFBZ0IsQ0FBQyxJQUFsQixDQUF3Qiw0QkFBeEIsQ0FBVixDQUFBO0FBQ0EsSUFBQSxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXBCO0FBS0UsTUFBQSxNQUFBLEdBQVMsT0FBTyxDQUFDLEtBQVIsQ0FBQSxDQUFULENBQUE7QUFBQSxNQUlBLFNBQUEsR0FBZ0IsQ0FBQyxDQUFDLEtBQUYsR0FBVSxJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU4sQ0FBQSxDQUFjLENBQUMsSUFKekMsQ0FBQTtBQUFBLE1BS0EsUUFBQSxHQUFnQixDQUFDLENBQUMsS0FBRixHQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFBLENBQWMsQ0FBQyxHQUx6QyxDQUFBO0FBQUEsTUFNQSxTQUFBLEdBQWdCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFBLENBTmhCLENBQUE7QUFBQSxNQU9BLFVBQUEsR0FBZ0IsSUFBQyxDQUFBLElBQUksQ0FBQyxNQUFOLENBQUEsQ0FQaEIsQ0FBQTtBQUFBLE1BUUEsVUFBQSxHQUFnQixTQUFBLEdBQVksQ0FBQyxNQUFNLENBQUMsVUFBUCxDQUFBLENBQUEsR0FBc0IsQ0FBdkIsQ0FSNUIsQ0FBQTtBQUFBLE1BU0EsU0FBQSxHQUFnQixRQUFBLEdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQUEsR0FBdUIsQ0FBeEIsQ0FUM0IsQ0FBQTtBQUFBLE1BVUEsV0FBQSxHQUFnQixTQUFBLEdBQVksQ0FBQyxNQUFNLENBQUMsVUFBUCxDQUFBLENBQUEsR0FBc0IsQ0FBdkIsQ0FWNUIsQ0FBQTtBQUFBLE1BV0EsWUFBQSxHQUFnQixRQUFBLEdBQVcsQ0FBQyxNQUFNLENBQUMsV0FBUCxDQUFBLENBQUEsR0FBdUIsQ0FBeEIsQ0FYM0IsQ0FBQTtBQUFBLE1BWUEsV0FBQSxHQUFnQixNQUFNLENBQUMsVUFBUCxDQUFBLENBWmhCLENBQUE7QUFBQSxNQWFBLFlBQUEsR0FBZ0IsTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQWJoQixDQUFBO0FBa0JBLE1BQUEsSUFBRyxVQUFBLElBQWMsQ0FBakI7QUFDRSxRQUFBLE9BQUEsR0FBVSxDQUFWLENBREY7T0FBQSxNQUVLLElBQUcsV0FBQSxHQUFjLFNBQWpCO0FBQ0gsUUFBQSxPQUFBLEdBQVUsVUFBVixDQURHO09BQUEsTUFBQTtBQUdILFFBQUEsT0FBQSxHQUFVLFNBQUEsR0FBWSxXQUF0QixDQUhHO09BcEJMO0FBNEJBLE1BQUEsSUFBRyxTQUFBLElBQWEsQ0FBaEI7QUFDRSxRQUFBLE9BQUEsR0FBVSxDQUFWLENBREY7T0FBQSxNQUVLLElBQUcsWUFBQSxHQUFlLFVBQWxCO0FBQ0gsUUFBQSxPQUFBLEdBQVUsU0FBVixDQURHO09BQUEsTUFBQTtBQUdILFFBQUEsT0FBQSxHQUFVLFVBQUEsR0FBYSxZQUF2QixDQUhHO09BOUJMO2FBcUNBLE1BQU0sQ0FBQyxHQUFQLENBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxPQUFOO0FBQUEsUUFDQSxHQUFBLEVBQUssT0FETDtPQURGLEVBMUNGO0tBRlM7RUFBQSxDQXZEWCxDQUFBOztBQUFBLG1CQXVHQSxPQUFBLEdBQVMsU0FBQSxHQUFBO1dBQ1AsSUFBQyxDQUFBLGdCQUFnQixDQUFDLElBQWxCLENBQXdCLGdCQUF4QixFQURPO0VBQUEsQ0F2R1QsQ0FBQTs7QUFBQSxtQkEwR0EsY0FBQSxHQUFnQixTQUFBLEdBQUE7V0FDZCxJQUFDLENBQUEsZ0JBQWdCLENBQUMsSUFBbEIsQ0FBd0IsNEJBQXhCLEVBRGM7RUFBQSxDQTFHaEIsQ0FBQTs7QUFBQSxtQkE2R0EsVUFBQSxHQUFZLFNBQUEsR0FBQTtXQUNWLElBQUMsQ0FBQSxPQUFELENBQUEsQ0FBVSxDQUFDLElBQVgsQ0FBQSxFQURVO0VBQUEsQ0E3R1osQ0FBQTs7QUFBQSxtQkFnSEEsWUFBQSxHQUFjLFNBQUMsTUFBRCxHQUFBO0FBQ1osUUFBQSxHQUFBOztNQURhLFNBQVM7S0FDdEI7QUFBQSxJQUFBLEdBQUEsR0FBTSxJQUFJLENBQUMsTUFBTCxDQUFBLENBQWEsQ0FBQyxRQUFkLENBQXVCLEVBQXZCLENBQTBCLENBQUMsS0FBM0IsQ0FBaUMsQ0FBakMsQ0FBTixDQUFBO0FBQUEsSUFDQSxHQUFBLEdBQU0sR0FBQSxHQUFNLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBYSxDQUFDLFFBQWQsQ0FBdUIsRUFBdkIsQ0FBMEIsQ0FBQyxLQUEzQixDQUFpQyxDQUFqQyxDQURaLENBQUE7V0FFQSxHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsTUFBQSxHQUFTLENBQTFCLEVBSFk7RUFBQSxDQWhIZCxDQUFBOztnQkFBQTs7SUF6REYsQ0FBQSIsImZpbGUiOiJwbGFuaXQtdG1wLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGxhbml0XG5cbiAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRGVmYXVsdCBPcHRpb25zXG5cbiAgbmV3OiAoQG9wdGlvbnMpIC0+XG5cbiAgICAjIERlZmF1bHQgT3B0aW9uc1xuICAgIEBvcHRpb25zID0ge30gdW5sZXNzIEBvcHRpb25zXG4gICAgQHBsYW5PcHRpb25zID1cbiAgICAgIGNvbnRhaW5lcjogJCgnI3BsYW5pdCcpXG5cbiAgICAjIElucHV0IE9wdGlvbnNcbiAgICBAcGxhbk9wdGlvbnMuY29udGFpbmVyID0gJChcIiMje0BvcHRpb25zLmNvbnRhaW5lcn1cIikgaWYgQG9wdGlvbnMuY29udGFpbmVyXG4gICAgQHBsYW5PcHRpb25zLmJhY2tncm91bmRJbWFnZSA9IEBvcHRpb25zLmJhY2tncm91bmRJbWFnZSBpZiBAb3B0aW9ucy5iYWNrZ3JvdW5kSW1hZ2VcblxuICAgICMgSW5pdGlhbGl6ZSBQbGFuXG4gICAgQHBsYW4gPSBuZXcgUGxhbml0LlBsYW4oQHBsYW5PcHRpb25zKVxuXG4gICAgIyBBZGQgTWFya2VycyAoaWYgbmVjZXNzYXJ5KVxuICAgIGlmIEBvcHRpb25zLm1hcmtlcnNcbiAgICAgICQod2luZG93KS5sb2FkICgpID0+XG4gICAgICAgIEBhZGRNYXJrZXIobWFya2VyKSBmb3IgbWFya2VyIGluIEBvcHRpb25zLm1hcmtlcnNcblxuICAgICMgUmV0dXJuIHRoaXMgUGxhbml0IG9iamVjdFxuICAgIEBcblxuICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBBZGQgQSBNYXJrZXJcblxuICBhZGRNYXJrZXI6IChvcHRpb25zKSA9PlxuICAgIG9wdGlvbnMucGxhbiA9IEBwbGFuT3B0aW9ucy5jb250YWluZXJcbiAgICBuZXcgUGxhbml0Lk1hcmtlcihvcHRpb25zKVxuXG4jIHNldCB0aGlzIGNsYXNzIHRvIGEgZ2xvYmFsIGBwbGFuaXRgIHZhcmlhYmxlXG53aW5kb3cucGxhbml0ID0gbmV3IFBsYW5pdFxuXG5jbGFzcyBQbGFuaXQuUGxhblxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMpIC0+XG4gICAgQGluaXRDb250YWluZXJzKClcbiAgICBAYWRkQmFja2dyb3VuZEltYWdlKCkgaWYgQG9wdGlvbnMuYmFja2dyb3VuZEltYWdlXG5cbiAgaW5pdENvbnRhaW5lcnM6IC0+XG4gICAgQG9wdGlvbnMuY29udGFpbmVyLmFkZENsYXNzKCdwbGFuaXQtY29udGFpbmVyJylcbiAgICBAb3B0aW9ucy5jb250YWluZXIuYXBwZW5kKFwiXCJcIjxkaXYgY2xhc3M9XCJwbGFuaXQtbWFya2Vycy1jb250YWluZXJcIj48L2Rpdj5cIlwiXCIpXG5cbiAgYWRkQmFja2dyb3VuZEltYWdlOiAtPlxuICAgIEBvcHRpb25zLmNvbnRhaW5lci5hcHBlbmQoXCJcIlwiPGltZyBzcmM9XCIje0BvcHRpb25zLmJhY2tncm91bmRJbWFnZX1cIj5cIlwiXCIpXG4gICAgQG9wdGlvbnMuY29udGFpbmVyLmZpbmQoJy5wbGFuaXQtbWFya2Vycy1jb250YWluZXInKS5jc3NcbiAgICAgIGJhY2tncm91bmRJbWFnZTogXCJ1cmwoJyN7QG9wdGlvbnMuYmFja2dyb3VuZEltYWdlfScpXCJcbiAgICAkKHdpbmRvdykubG9hZCA9PlxuICAgICAgQG9wdGlvbnMuY29udGFpbmVyLmNzc1xuICAgICAgICBoZWlnaHQ6IEBvcHRpb25zLmNvbnRhaW5lci5maW5kKCdpbWcnKS5maXJzdCgpLmhlaWdodCgpXG4gICAgICBAb3B0aW9ucy5jb250YWluZXIuZmluZCgnaW1nJykuZmlyc3QoKS5yZW1vdmUoKVxuXG5cbmNsYXNzIFBsYW5pdC5NYXJrZXJcblxuICBjb25zdHJ1Y3RvcjogKEBvcHRpb25zKSAtPlxuXG4gICAgIyBkZWZhdWx0IG9wdGlvbnNcbiAgICBAcGxhbiA9IEBvcHRpb25zLnBsYW5cbiAgICBAbWFya2Vyc0NvbnRhaW5lciA9IEBwbGFuLmZpbmQoJy5wbGFuaXQtbWFya2Vycy1jb250YWluZXInKVxuXG4gICAgIyBiaW5kIGRyYWdnYWJsZSBldmVudHNcbiAgICAkKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlJywgQG1vdXNlbW92ZSlcbiAgICAkKGRvY3VtZW50KS5vbignbW91c2V1cCcsIEBtb3VzZXVwKVxuXG4gICAgIyBhZGQgbWFya2VyXG4gICAgQG1hcmtlcnNDb250YWluZXIuYXBwZW5kKFxuICAgICAgJCgnPGRpdj48ZGl2IGNsYXNzPVwicGxhbml0LW1hcmtlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+JylcbiAgICAgICAgLmFkZENsYXNzKCdwbGFuaXQtbWFya2VyJylcbiAgICAgICAgLmNzc1xuICAgICAgICAgIGxlZnQ6IFwiI3tAb3B0aW9ucy5jb29yZHNbMF19JVwiXG4gICAgICAgICAgdG9wOiBcIiN7QG9wdGlvbnMuY29vcmRzWzFdfSVcIlxuICAgIClcbiAgICBpZiBAb3B0aW9ucy5kcmFnZ2FibGVcbiAgICAgIEBsYXN0TWFya2VyKCkuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpXG4gICAgICBAbGFzdE1hcmtlcigpLm9uKCdtb3VzZWRvd24nLCBAbW91c2Vkb3duKVxuICAgIGlmIEBvcHRpb25zLmluZm9ib3hcbiAgICAgIGlkID0gQHJhbmRvbVN0cmluZygxNilcbiAgICAgIEBsYXN0TWFya2VyKCkuZmluZCgnLnBsYW5pdC1tYXJrZXItY29udGVudCcpLmFwcGVuZCBcIlwiXCJcbiAgICAgICAgPGRpdiBjbGFzcz1cInBsYW5pdC1pbmZvYm94XCIgaWQ9XCJpbmZvLSN7aWR9XCI+I3tAb3B0aW9ucy5pbmZvYm94fTwvZGl2PlxuICAgICAgICAgIFwiXCJcIlxuICAgICAgQGxhc3RNYXJrZXIoKS5hdHRyKCdkYXRhLWluZm9ib3gnLCBcImluZm8tI3tpZH1cIilcbiAgICAgIGluZm9ib3ggPSAkKFwiIyN7QGxhc3RNYXJrZXIoKS5hdHRyKCdkYXRhLWluZm9ib3gnKX1cIilcbiAgICAgIGluZm9ib3guY3NzXG4gICAgICAgIGxlZnQ6IC0oaW5mb2JveC53aWR0aCgpIC8gMilcbiAgICAgICAgYm90dG9tOiBpbmZvYm94Lm91dGVySGVpZ2h0KCkgKyA1XG4gICAgICBAbGFzdE1hcmtlcigpLm9uICdtb3VzZWxlYXZlJywgKGUpID0+XG4gICAgICAgIG1hcmtlciA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5wbGFuaXQtbWFya2VyJylcbiAgICAgICAgaW5mb2JveCA9ICQoXCIjI3ttYXJrZXIuYXR0cignZGF0YS1pbmZvYm94Jyl9XCIpXG4gICAgICAgIGluZm9ib3gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICBAbGFzdE1hcmtlcigpLm9uICdtb3VzZW92ZXInLCAoZSkgPT5cbiAgICAgICAgbWFya2VyID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLnBsYW5pdC1tYXJrZXInKVxuICAgICAgICBpbmZvYm94ID0gJChcIiMje21hcmtlci5hdHRyKCdkYXRhLWluZm9ib3gnKX1cIilcbiAgICAgICAgaWYgbWFya2VyLmhhc0NsYXNzKCdpcy1kcmFnZ2luZycpIHx8IEBkcmFnZ2luZ01hcmtlcigpLmxlbmd0aCA+IDBcbiAgICAgICAgICBpbmZvYm94LnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgaW5mb2JveC5hZGRDbGFzcygnYWN0aXZlJylcblxuICBtb3VzZWRvd246IChlKSA9PlxuICAgIG1hcmtlciA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5wbGFuaXQtbWFya2VyJylcbiAgICBtYXJrZXIuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJylcbiAgICBpbmZvYm94SUQgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcucGxhbml0LW1hcmtlcicpLmF0dHIoJ2RhdGEtaW5mb2JveCcpXG4gICAgJChcIiMje2luZm9ib3hJRH1cIikucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG5cbiAgbW91c2V1cDogKGUpID0+XG4gICAgaWYgJChlLnRhcmdldCkuaGFzQ2xhc3MoJ3BsYW5pdC1tYXJrZXItY29udGVudCcpXG4gICAgICBtYXJrZXIgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcucGxhbml0LW1hcmtlcicpXG4gICAgICAkKFwiIyN7bWFya2VyLmF0dHIoJ2RhdGEtaW5mb2JveCcpfVwiKS5hZGRDbGFzcygnYWN0aXZlJylcbiAgICBAZHJhZ2dpbmdNYXJrZXIoKS5yZW1vdmVDbGFzcygnaXMtZHJhZ2dpbmcnKVxuXG4gIG1vdXNlbW92ZTogKGUpID0+XG4gICAgbWFya2VycyA9IEBtYXJrZXJzQ29udGFpbmVyLmZpbmQoJy5wbGFuaXQtbWFya2VyLmlzLWRyYWdnaW5nJylcbiAgICBpZiBtYXJrZXJzLmxlbmd0aCA+IDBcblxuICAgICAgIyBvbmx5IHVzZSBmaXJzdCBtYXJrZXIgaW4gY2FzZSB0aGVyZSBhcmUgbW9yZSB0aGFuXG4gICAgICAjIG9uZSBkcmFnZ2luZ1xuICAgICAgIyBcbiAgICAgIG1hcmtlciA9IG1hcmtlcnMuZmlyc3QoKVxuXG4gICAgICAjIGNhbGN1bGF0ZSBwb3NpdGlvbnNcbiAgICAgICMgXG4gICAgICBtb3VzZUxlZnQgICAgID0gZS5wYWdlWCAtIEBwbGFuLm9mZnNldCgpLmxlZnRcbiAgICAgIG1vdXNlVG9wICAgICAgPSBlLnBhZ2VZIC0gQHBsYW4ub2Zmc2V0KCkudG9wXG4gICAgICBwbGFuUmlnaHQgICAgID0gQHBsYW4ud2lkdGgoKVxuICAgICAgcGxhbkJvdHRvbSAgICA9IEBwbGFuLmhlaWdodCgpXG4gICAgICBtYXJrZXJMZWZ0ICAgID0gbW91c2VMZWZ0IC0gKG1hcmtlci5vdXRlcldpZHRoKCkgLyAyKVxuICAgICAgbWFya2VyVG9wICAgICA9IG1vdXNlVG9wIC0gKG1hcmtlci5vdXRlckhlaWdodCgpIC8gMilcbiAgICAgIG1hcmtlclJpZ2h0ICAgPSBtb3VzZUxlZnQgKyAobWFya2VyLm91dGVyV2lkdGgoKSAvIDIpXG4gICAgICBtYXJrZXJCb3R0b20gID0gbW91c2VUb3AgKyAobWFya2VyLm91dGVySGVpZ2h0KCkgLyAyKVxuICAgICAgbWFya2VyV2lkdGggICA9IG1hcmtlci5vdXRlcldpZHRoKClcbiAgICAgIG1hcmtlckhlaWdodCAgPSBtYXJrZXIub3V0ZXJIZWlnaHQoKVxuXG4gICAgICAjIGZpbmQgdGhlIGxlZnQgcG9zaXRpb24gb2YgdGhlIG1hcmtlciBiYXNlZCBvblxuICAgICAgIyBwb3NpdGlvbiBvZiB0aGUgbW91c2UgcmVsYXRpdmUgdG8gdGhlIHBsYW5cbiAgICAgICMgXG4gICAgICBpZiBtYXJrZXJMZWZ0IDw9IDBcbiAgICAgICAgbWFya2VyWCA9IDBcbiAgICAgIGVsc2UgaWYgbWFya2VyUmlnaHQgPCBwbGFuUmlnaHRcbiAgICAgICAgbWFya2VyWCA9IG1hcmtlckxlZnRcbiAgICAgIGVsc2VcbiAgICAgICAgbWFya2VyWCA9IHBsYW5SaWdodCAtIG1hcmtlcldpZHRoXG5cbiAgICAgICMgZmluZCB0aGUgbGVmdCBwb3NpdGlvbiBvZiB0aGUgbWFya2VyIGJhc2VkIG9uXG4gICAgICAjIHBvc2l0aW9uIG9mIHRoZSBtb3VzZSByZWxhdGl2ZSB0byB0aGUgcGxhblxuICAgICAgIyBcbiAgICAgIGlmIG1hcmtlclRvcCA8PSAwXG4gICAgICAgIG1hcmtlclkgPSAwXG4gICAgICBlbHNlIGlmIG1hcmtlckJvdHRvbSA8IHBsYW5Cb3R0b21cbiAgICAgICAgbWFya2VyWSA9IG1hcmtlclRvcFxuICAgICAgZWxzZVxuICAgICAgICBtYXJrZXJZID0gcGxhbkJvdHRvbSAtIG1hcmtlckhlaWdodFxuXG4gICAgICAjIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1hcmtlclxuICAgICAgIyBcbiAgICAgIG1hcmtlci5jc3NcbiAgICAgICAgbGVmdDogbWFya2VyWFxuICAgICAgICB0b3A6IG1hcmtlcllcblxuICBtYXJrZXJzOiAtPlxuICAgIEBtYXJrZXJzQ29udGFpbmVyLmZpbmQoJy5wbGFuaXQtbWFya2VyJylcblxuICBkcmFnZ2luZ01hcmtlcjogLT5cbiAgICBAbWFya2Vyc0NvbnRhaW5lci5maW5kKCcucGxhbml0LW1hcmtlci5pcy1kcmFnZ2luZycpXG5cbiAgbGFzdE1hcmtlcjogLT5cbiAgICBAbWFya2VycygpLmxhc3QoKVxuXG4gIHJhbmRvbVN0cmluZzogKGxlbmd0aCA9IDE2KSAtPlxuICAgIHN0ciA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpIFxuICAgIHN0ciA9IHN0ciArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpXG4gICAgc3RyLnN1YnN0cmluZygwLCBsZW5ndGggLSAxKVxuIl19